{"version":3,"file":"static/js/298.89cb157d.chunk.js","mappings":"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","sources":["webpack://learning-platform-commerce/./src/components/auth/SingInForm/SingInForm.module.scss?b1d0","webpack://learning-platform-commerce/./src/components/auth/PasswordRecovery/PasswordRecovery.module.scss?7324","components/auth/PasswordRecovery/PasswordRecovery.jsx","components/auth/SingInForm/SingInForm.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"pageWrapper\":\"SingInForm_pageWrapper__4sDHr\"};","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"PasswordRecovery_wrapper__VgXHZ\",\"form\":\"PasswordRecovery_form__2uAJz\",\"emailInfo\":\"PasswordRecovery_emailInfo__+uvWS\",\"sendAgain\":\"PasswordRecovery_sendAgain__FoMtd\",\"row\":\"PasswordRecovery_row__xjhCb\",\"submitBtn\":\"PasswordRecovery_submitBtn__KY2uu\"};","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { setNewPasswordThunk } from \"../../../redux/user/operations\";\nimport {\n  resendPasswordResetCode,\n  resetPassword,\n} from \"../../../http/services/user\";\nimport {\n  validateCode,\n  validateEmail,\n} from \"../../../utils/inputsValidateHandler\";\nimport InputText from \"../shared/InputText/InputText\";\nimport InputPassword from \"../shared/InputPassword/InputPassword\";\nimport styles from \"./PasswordRecovery.module.scss\";\n\nconst PasswordRecovery = ({ messageApi }) => {\n  const [email, setEmail] = useState(\"\");\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [code, setCode] = useState(\"\");\n  const [errorField, setErrorField] = useState(\"\");\n  const [isVerification, setIsVerification] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const handleSumbitEmail = async (e) => {\n    e.preventDefault();\n\n    //client validation\n    if (!validateEmail(email)) {\n      messageApi.open({\n        type: \"error\",\n        content: (\n          <>\n            <span>Please write valid email.</span>\n            <p>Example: example@mail.com</p>\n          </>\n        ),\n      });\n      setErrorField(\"email\");\n      return;\n    }\n    //client validation\n\n    try {\n      const response = await resetPassword(email);\n      const message = response.data.message;\n      if (response.status === 200) {\n        messageApi.open({\n          type: \"success\",\n          content: `${message} ${email}`,\n        });\n        setIsVerification(true);\n      }\n    } catch (error) {\n      //response validation\n      const message = error.response.data.detail;\n      if (error.response.status === 404 && message.includes(\"email\")) {\n        messageApi.open({\n          type: \"error\",\n          content: message,\n        });\n        setErrorField(\"email\");\n      } else {\n        messageApi.open({\n          type: \"error\",\n          content: \"Something went wrong. Please try again\",\n        });\n      }\n      //response validation\n    }\n  };\n\n  const handleVerify = async (e) => {\n    e.preventDefault();\n\n    //client validation\n    if (!validateCode(code)) {\n      messageApi.open({\n        type: \"error\",\n        content: \"Recovery code's length must be 6 characters\",\n      });\n      setErrorField(\"Recovery code\");\n      return;\n    }\n    //client validation\n\n    const credentials = {\n      code,\n      new_pass: newPassword,\n      email,\n    };\n\n    dispatch(setNewPasswordThunk({ credentials, messageApi, setErrorField }));\n  };\n\n  const resetError = () => {\n    setErrorField(\"\");\n  };\n\n  const handleResendCode = async () => {\n    try {\n      const response = await resendPasswordResetCode(email);\n      const message = response.data.message;\n      if (response.status === 200) {\n        messageApi.open({\n          type: \"success\",\n          content: `${message} ${email}`,\n        });\n      }\n    } catch (error) {\n      messageApi.open({\n        type: \"error\",\n        content: \"Something went wrong. Please try again\",\n      });\n    }\n  };\n\n  return (\n    <div className={styles.wrapper}>\n      <form\n        className={styles.form}\n        onSubmit={isVerification ? handleVerify : handleSumbitEmail}\n      >\n        <h2>Password recovery</h2>\n        <p className={styles.emailInfo}>\n          {isVerification\n            ? \"Enter the received code to your email and enter a new password.\"\n            : \"Enter the email that was used for registration. We will send you a recovery code.\"}\n        </p>\n        {isVerification ? (\n          <>\n            <div className={styles.row}>\n              <InputText\n                name=\"Recovery code\"\n                value={code}\n                onChange={setCode}\n                isError={errorField === \"Recovery code\"}\n                resetError={resetError}\n              />\n            </div>\n            <div className={styles.row}>\n              <InputPassword\n                name=\"New password\"\n                value={newPassword}\n                onChange={setNewPassword}\n                isError={errorField === \"newPassword\"}\n                resetError={resetError}\n              />\n            </div>\n          </>\n        ) : (\n          <div className={styles.row}>\n            <InputText\n              name=\"email\"\n              value={email}\n              onChange={setEmail}\n              isError={errorField === \"email\"}\n              resetError={resetError}\n            />\n          </div>\n        )}\n        <button type=\"submit\" className={styles.submitBtn}>\n          <span>Continue</span>\n        </button>\n        {isVerification && (\n          <p className={styles.sendAgain}>\n            Send the code <span onClick={handleResendCode}>again!</span>\n          </p>\n        )}\n      </form>\n    </div>\n  );\n};\n\nexport default PasswordRecovery;\n","import React, { useEffect, useState } from \"react\";\nimport AuthForm from \"../shared/AuthForm/AuthForm\";\nimport styles from \"./SingInForm.module.scss\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { loginThunk } from \"../../../redux/user/operations\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { getAccessToken } from \"../../../redux/user/selectors\";\nimport { message } from \"antd\";\nimport PasswordRecovery from \"../PasswordRecovery/PasswordRecovery\";\nimport { useCart } from \"../../../context/cartContext\";\n\nconst SingInForm = () => {\n  const [errorField, setErrorField] = useState(\"\");\n  const [messageApi, contextHolder] = message.useMessage();\n  const [isResetPassword, setIsResetPassword] = useState(false);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const location = useLocation();\n  const { handleOpen } = useCart();\n\n  const accessToken = useSelector(getAccessToken);\n\n  useEffect(() => {\n    if (accessToken) {\n      if (location.state?.from) {\n        navigate(location.state?.from);\n        location.state?.navigateFromCart && handleOpen(); \n      }\n      navigate(\"/\");\n    }\n    // eslint-disable-next-line\n  }, [accessToken]);\n\n  const handleSubmit = (data) => {\n    dispatch(\n      loginThunk({ credentials: data, messageApi, setErrorField, navigate })\n    );\n  };\n\n  const resetError = () => {\n    setErrorField(\"\");\n  };\n\n  return (\n    <div className={styles.pageWrapper}>\n      {contextHolder}\n      {isResetPassword ? (\n        <PasswordRecovery messageApi={messageApi} />\n      ) : (\n        <AuthForm\n          handleSubmit={handleSubmit}\n          type=\"login\"\n          errorField={errorField}\n          resetError={resetError}\n          setIsResetPassword={setIsResetPassword}\n          messageApi={messageApi}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default SingInForm;\n"],"names":["_ref","messageApi","email","setEmail","useState","newPassword","setNewPassword","code","setCode","errorField","setErrorField","isVerification","setIsVerification","dispatch","useDispatch","resetError","_jsx","className","styles","children","_jsxs","onSubmit","async","e","preventDefault","validateCode","open","type","content","credentials","new_pass","setNewPasswordThunk","validateEmail","_Fragment","response","resetPassword","message","data","status","concat","error","detail","includes","InputText","name","value","onChange","isError","InputPassword","onClick","resendPasswordResetCode","SingInForm","contextHolder","useMessage","isResetPassword","setIsResetPassword","navigate","useNavigate","location","useLocation","handleOpen","useCart","accessToken","useSelector","getAccessToken","useEffect","_location$state","_location$state2","_location$state3","state","from","navigateFromCart","PasswordRecovery","AuthForm","handleSubmit","loginThunk"],"sourceRoot":""}
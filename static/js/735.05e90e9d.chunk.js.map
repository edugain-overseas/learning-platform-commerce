{"version":3,"file":"static/js/735.05e90e9d.chunk.js","mappings":"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","sources":["components/Lecture/Lecture.jsx","components/Test/Test.jsx","webpack://learning-platform-commerce/./src/pages/TaskPage/TaskPage.module.scss?824e","pages/TaskPage/TaskPage.jsx"],"sourcesContent":["import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { getAllCourses } from \"../../redux/course/selectors\";\nimport LectureHeader from \"../TasksHeader/LectureHeader\";\nimport LectureContent from \"./LectureContent\";\nimport CourseAsideProgressPanel from \"../CourseAsideProgressPanel/CourseAsideProgressPanel\";\nimport styles from \"./Lecture.module.scss\";\nimport { SelectionProvider } from \"../../context/SelectionContext\";\n\nconst Lecture = ({ lecture }) => {\n  const { course_id: courseId, id } = lecture;\n  const courses = useSelector(getAllCourses);\n  const course = courses.find(({ id }) => id === +courseId);\n  const courseName = course?.title;\n  const courseLessons = course?.lessons;\n  const status = courseLessons?.find(\n    ({ id: lectureId }) => lectureId === id\n  )?.status;\n\n  return (\n    <div className={styles.lectureWrapper}>\n      <SelectionProvider>\n        <LectureHeader lecture={lecture} />\n        <div className={styles.bodyWrapper}>\n          <LectureContent lecture={{ ...lecture, status, courseName }} />\n          <div className={styles.progressWrapper}>\n            <CourseAsideProgressPanel\n              courseLessons={courseLessons ? courseLessons : []}\n              courseId={courseId}\n              progress={course?.progress}\n            />\n          </div>\n        </div>\n      </SelectionProvider>\n    </div>\n  );\n};\n\nexport default Lecture;\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getAllCourses } from \"../../redux/course/selectors\";\nimport { getTestAttemptsThunk } from \"../../redux/lesson/operation\";\nimport { getTestAttemptById } from \"../../http/services/lesson\";\nimport TestHeader from \"../TasksHeader/TestHeader\";\nimport TestContent from \"./TestContent\";\nimport CourseAsideProgressPanel from \"../CourseAsideProgressPanel/CourseAsideProgressPanel\";\nimport styles from \"./Test.module.scss\";\nimport useMessage from \"antd/es/message/useMessage\";\n\nconst Test = ({ test }) => {\n  const { course_id: courseId, id } = test;\n  const [studentAnswersLength, setStudentAnswersLength] = useState(0);\n  const [submitedAttemptData, setSubmitedAttemptData] = useState(null);\n  const [messageApi, contextHolder] = useMessage();\n  const dispatch = useDispatch();\n\n  const course = useSelector(getAllCourses)?.find(({ id }) => id === +courseId);\n  const courseLessons = course?.lessons;\n  const testScore = courseLessons?.find(({ id }) => id === test.id)?.score;\n  const status = courseLessons?.find(({ id: testId }) => testId === id)?.status;\n\n  const testId = test.test_data.test_id;\n\n  const isTestClosed =\n    test.test_data.attempts <= test.test_data.attempts_data?.length;\n\n  const sumbittedAttemptId = test.test_data.my_attempt_id;\n\n  useEffect(() => {\n    if (testId) {\n      dispatch(getTestAttemptsThunk({ test_id: testId }));\n    }\n    // eslint-disable-next-line\n  }, [testId]);\n\n  useEffect(() => {\n    const fetchAttemptId = async () => {\n      try {\n        const data = await getTestAttemptById(sumbittedAttemptId);\n        setSubmitedAttemptData(data);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    if (sumbittedAttemptId) {\n      fetchAttemptId();\n    }\n  }, [sumbittedAttemptId]);\n\n\n  return (\n    <div className={styles.testWrapper}>\n      {contextHolder}\n      <TestHeader\n        test={test}\n        testScore={testScore}\n        questionsDoneAmount={studentAnswersLength}\n      />\n      <div className={styles.bodyWrapper}>\n        <TestContent\n          test={{ ...test, status }}\n          setStudentAnswersLength={setStudentAnswersLength}\n          closed={isTestClosed}\n          answers={submitedAttemptData}\n          messageApi={messageApi}\n        />\n        <div className={styles.progressWrapper}>\n          <CourseAsideProgressPanel\n            courseLessons={courseLessons ? courseLessons : []}\n            courseId={courseId}\n            progress={course?.progress}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Test;\n","// extracted by mini-css-extract-plugin\nexport default {\"pageWrapper\":\"TaskPage_pageWrapper__rKBv0\"};","import React, { useEffect } from \"react\";\nimport { Navigate, useParams } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getLessonByIdThunk } from \"../../redux/lesson/operation\";\nimport { getAllLessons } from \"../../redux/lesson/selectors\";\nimport Lecture from \"../../components/Lecture/Lecture\";\nimport Test from \"../../components/Test/Test\";\n// import Exam from \"../../components/Exam/Exam\";\nimport styles from \"./TaskPage.module.scss\";\nimport { getAllCourses } from \"../../redux/course/selectors\";\n\nconst TaskPage = () => {\n  const { taskId } = useParams();\n  const dispatch = useDispatch();\n\n  const lessons = useSelector(getAllLessons);\n  const courses = useSelector(getAllCourses);\n\n  const task = lessons.find(({ id }) => id === +taskId);\n  const taskType = task?.type;\n\n  const courseId = courses.find((course) =>\n    course.lessons.find((lesson) => lesson.id === +taskId)\n  )?.id;\n\n  useEffect(() => {\n    if (taskId && !task) {\n      dispatch(getLessonByIdThunk(+taskId));\n    }\n    // eslint-disable-next-line\n  }, [taskId]);\n\n  return (\n    <div className={styles.pageWrapper}>\n      {taskType === \"lecture\" && <Lecture lecture={task} />}\n      {taskType === \"test\" && <Test test={task} />}\n      {taskType === \"exam\" && (\n        <Navigate to={`/course/${courseId}/exam-certificate`} />\n      )}\n    </div>\n  );\n};\n\nexport default TaskPage;\n"],"names":["_ref","_courseLessons$find","lecture","course_id","courseId","id","course","useSelector","getAllCourses","find","_ref2","courseName","title","courseLessons","lessons","status","_ref3","lectureId","_jsx","className","styles","lectureWrapper","children","_jsxs","SelectionProvider","LectureHeader","bodyWrapper","LectureContent","progressWrapper","CourseAsideProgressPanel","progress","_useSelector","_courseLessons$find2","_test$test_data$attem","test","studentAnswersLength","setStudentAnswersLength","useState","submitedAttemptData","setSubmitedAttemptData","messageApi","contextHolder","useMessage","dispatch","useDispatch","testScore","score","_ref4","testId","test_data","test_id","isTestClosed","attempts","attempts_data","length","sumbittedAttemptId","my_attempt_id","useEffect","getTestAttemptsThunk","async","data","getTestAttemptById","error","console","log","fetchAttemptId","testWrapper","TestHeader","questionsDoneAmount","TestContent","closed","answers","TaskPage","_courses$find","taskId","useParams","getAllLessons","courses","task","taskType","type","lesson","getLessonByIdThunk","Lecture","Test","Navigate","to","concat"],"sourceRoot":""}